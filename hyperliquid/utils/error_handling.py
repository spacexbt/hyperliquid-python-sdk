at): Maximum delay between retries in seconds.
        backoff_factor (float): Factor to multiply delay by after each retry.
        exceptions (tuple): Tuple of exceptions to retry on.
        
    Returns:
        Callable: Decorated function that will retry on failure.
    """
    def decorator(func: Callable[..., T]) -> Callable[..., T]:
        @wraps(func)
        def wrapper(*args: Any, **kwargs: Any) -> T:
            delay = initial_delay
            last_exception = None
            
            for retry in range(max_retries + 1):
                try:
                    return func(*args, **kwargs)
                except exceptions as e:
                    last_exception = e
                    if retry == max_retries:
                        break
                    
                    time.sleep(delay)
                    delay = min(delay * backoff_factor, max_delay)
            
            raise last_exception  # type: ignore
            
        return wrapper
    return decorator

def validate_numeric_param(
    value: Union[int, float, str],
    param_name: str,
    min_value: Optional[Union[int, float]] = None,
    max_value: Optional[Union[int, float]] = None
) -> Union[int, float]:
    """Validate a numeric parameter.
    
    Args:
        value: The value to validate.
        param_name: Name of the parameter (for error messages).
        min_value: Minimum allowed value (inclusive).
        max_value: Maximum allowed value (inclusive).
        
    Returns:
        Union[int, float]: The validated numeric value.
        
    Raises:
        InvalidParameterError: If validation fails.
    """
    try:
        if isinstance(value, str):
            # Try to convert string to float/int
            if '.' in value:
                num_value = float(value)
            else:
                num_value = int(value)
        else:
            num_value = value
    except (ValueError, TypeError):
        raise InvalidParameterError(f"Invalid {param_name}: must be a valid number")
    
    if min_value is not None and num_value < min_value:
        raise InvalidParameterError(
            f"Invalid {param_name}: {num_value} is less than minimum allowed value of {min_value}"
        )
    
    if max_value is not None and num_value > max_value:
        raise InvalidParameterError(
            f"Invalid {param_name}: {num_value} is greater than maximum allowed value of {max_value}"
        )
    
    return num_value